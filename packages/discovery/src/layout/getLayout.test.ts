import { expect } from 'earl'

import { getLayout } from './getLayout'
import { SolidityStorageLayout } from './SolidityStorageLayout'

describe(getLayout.name, () => {
  it('processes the example from solidity docs', () => {
    const example: SolidityStorageLayout = {
      storage: [
        {
          astId: 15,
          contract: 'fileA:A',
          label: 'x',
          offset: 0,
          slot: '0',
          type: 't_uint256',
        },
        {
          astId: 17,
          contract: 'fileA:A',
          label: 'y',
          offset: 0,
          slot: '1',
          type: 't_uint256',
        },
        {
          astId: 20,
          contract: 'fileA:A',
          label: 's',
          offset: 0,
          slot: '2',
          type: 't_struct(S)13_storage',
        },
        {
          astId: 22,
          contract: 'fileA:A',
          label: 'addr',
          offset: 0,
          slot: '6',
          type: 't_address',
        },
        {
          astId: 28,
          contract: 'fileA:A',
          label: 'map',
          offset: 0,
          slot: '7',
          type: 't_mapping(t_uint256,t_mapping(t_address,t_bool))',
        },
        {
          astId: 31,
          contract: 'fileA:A',
          label: 'array',
          offset: 0,
          slot: '8',
          type: 't_array(t_uint256)dyn_storage',
        },
        {
          astId: 33,
          contract: 'fileA:A',
          label: 's1',
          offset: 0,
          slot: '9',
          type: 't_string_storage',
        },
        {
          astId: 35,
          contract: 'fileA:A',
          label: 'b1',
          offset: 0,
          slot: '10',
          type: 't_bytes_storage',
        },
      ],
      types: {
        t_address: {
          encoding: 'inplace',
          label: 'address',
          numberOfBytes: '20',
        },
        't_array(t_uint256)2_storage': {
          base: 't_uint256',
          encoding: 'inplace',
          label: 'uint256[2]',
          numberOfBytes: '64',
        },
        't_array(t_uint256)dyn_storage': {
          base: 't_uint256',
          encoding: 'dynamic_array',
          label: 'uint256[]',
          numberOfBytes: '32',
        },
        t_bool: {
          encoding: 'inplace',
          label: 'bool',
          numberOfBytes: '1',
        },
        t_bytes_storage: {
          encoding: 'bytes',
          label: 'bytes',
          numberOfBytes: '32',
        },
        't_mapping(t_address,t_bool)': {
          encoding: 'mapping',
          key: 't_address',
          label: 'mapping(address => bool)',
          numberOfBytes: '32',
          value: 't_bool',
        },
        't_mapping(t_uint256,t_mapping(t_address,t_bool))': {
          encoding: 'mapping',
          key: 't_uint256',
          label: 'mapping(uint256 => mapping(address => bool))',
          numberOfBytes: '32',
          value: 't_mapping(t_address,t_bool)',
        },
        t_string_storage: {
          encoding: 'bytes',
          label: 'string',
          numberOfBytes: '32',
        },
        't_struct(S)13_storage': {
          encoding: 'inplace',
          label: 'struct A.S',
          members: [
            {
              astId: 3,
              contract: 'fileA:A',
              label: 'a',
              offset: 0,
              slot: '0',
              type: 't_uint128',
            },
            {
              astId: 5,
              contract: 'fileA:A',
              label: 'b',
              offset: 16,
              slot: '0',
              type: 't_uint128',
            },
            {
              astId: 9,
              contract: 'fileA:A',
              label: 'staticArray',
              offset: 0,
              slot: '1',
              type: 't_array(t_uint256)2_storage',
            },
            {
              astId: 12,
              contract: 'fileA:A',
              label: 'dynArray',
              offset: 0,
              slot: '3',
              type: 't_array(t_uint256)dyn_storage',
            },
          ],
          numberOfBytes: '128',
        },
        t_uint128: {
          encoding: 'inplace',
          label: 'uint128',
          numberOfBytes: '16',
        },
        t_uint256: {
          encoding: 'inplace',
          label: 'uint256',
          numberOfBytes: '32',
        },
      },
    }

    const processed = getLayout(example)
    expect(processed).toEqual([
      {
        name: 'x',
        kind: 'static',
        type: 'uint256',
        slot: 0,
        offset: 0,
        size: 32,
      },
      {
        name: 'y',
        kind: 'static',
        type: 'uint256',
        slot: 1,
        offset: 0,
        size: 32,
      },
      {
        name: 's',
        kind: 'struct',
        type: 'struct A.S',
        slot: 2,
        offset: 0,
        size: 32 * 4,
        children: [
          {
            name: 'a',
            kind: 'static',
            type: 'uint128',
            slot: 0,
            offset: 0,
            size: 16,
          },
          {
            name: 'b',
            kind: 'static',
            type: 'uint128',
            slot: 0,
            offset: 16,
            size: 16,
          },
          {
            name: 'staticArray',
            kind: 'static array',
            type: 'uint256[2]',
            slot: 1,
            offset: 0,
            size: 32 * 2,
            length: 2,
            item: {
              kind: 'static',
              type: 'uint256',
              size: 32,
            },
          },
          {
            name: 'dynArray',
            kind: 'dynamic array',
            type: 'uint256[]',
            slot: 3,
            offset: 0,
            size: 32,
            item: {
              kind: 'static',
              type: 'uint256',
              size: 32,
            },
          },
        ],
      },
      {
        name: 'addr',
        kind: 'static',
        type: 'address',
        slot: 6,
        offset: 0,
        size: 20,
      },
      {
        name: 'map',
        kind: 'mapping',
        type: 'mapping(uint256 => mapping(address => bool))',
        slot: 7,
        offset: 0,
        size: 32,
        key: {
          kind: 'static',
          type: 'uint256',
          size: 32,
        },
        value: {
          kind: 'mapping',
          type: 'mapping(address => bool)',
          size: 32,
          key: {
            kind: 'static',
            type: 'address',
            size: 20,
          },
          value: {
            kind: 'static',
            type: 'bool',
            size: 1,
          },
        },
      },
      {
        name: 'array',
        kind: 'dynamic array',
        type: 'uint256[]',
        slot: 8,
        offset: 0,
        size: 32,
        item: {
          kind: 'static',
          type: 'uint256',
          size: 32,
        },
      },
      {
        name: 's1',
        kind: 'dynamic bytes',
        type: 'string',
        slot: 9,
        offset: 0,
        size: 32,
      },
      {
        name: 'b1',
        kind: 'dynamic bytes',
        type: 'bytes',
        slot: 10,
        offset: 0,
        size: 32,
      },
    ])
  })
})
